// bakery.txt
//
// This is the model of bakery protocol from Abdulla's "Regular Model
// Checking without Transducers".
//
// This encoding of the protocol can not be adapted to apply process marking
// due to its process order assumption.  Please see the paper's appendix for
// a detailed description.
//
// I - idle
// W - wait
// C - critical
//

// at least two processes
I0 {
    init: s0;

    s0 -> s1 I;
    s1 -> s2 I;
    s2 -> s2 I;

    accepting: s2;
}

closedUnderTransitions;

// some process can enter the critical section
F {
    init: s0;

    s0 -> s0 I;
    s0 -> s0 W;

    s0 -> s1 C;

    s1 -> s1 I;
    s1 -> s1 W;
    s1 -> s1 C;

    accepting: s1;
}

P1 {
    init: s0;

    // t1 described in the paper
    s0 -> p0;

    p0 -> p0 I/I;
    p0 -> p0 W/W;

    p0 -> p1 I/W_;
    p1 -> p1 I/I;

    // t2 described in the paper
    s0 -> q0;

    q0 -> q0 I/I;
    q0 -> q1 W/C_;

    q1 -> q1 I/I;
    q1 -> q1 W/W;

    accepting: p1, q1;
}

P2 {
    init: s0;

    s0 -> s0 I/I;
    s0 -> s0 W/W;
    s0 -> s0 C/C;

    s0 -> s1 W_/W;
    s0 -> s1 C_/C;

    s1 -> s1 I/I;
    s1 -> s1 W/W;
    s1 -> s1 C/C;

    accepting: s1;
}

transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 1 .. 4;
