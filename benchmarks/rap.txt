// rap.txt
//
// Resource-allocator Protocol
// (see Example 1 in "Regular Symmetry Patterns" VMCAI'16)
//
// The first letter in the configurations represents the state of the
// allocator, and the rests represent the clients in the system.
//
// I - idle
// R - requesting
// C - critical
//

// any positive number of clients
I0 {
    init: s0;

    s0 -> s1 I;
    s1 -> s2 I;
    s2 -> s2 I;

    accepting: s2;
}

closedUnderTransitions;

// some client can access the resource
F {
    init: s0;

    s0 -> s1 I;
    s0 -> s1 C;

    // any I/R
    s1 -> s1 I;
    s1 -> s1 R;

    s1 -> s2 C;

    // followed by any I/R
    s2 -> s2 I;
    s2 -> s2 R;

    accepting: s2;
}

P1 {
    init: s0;

    // choose a client
    s0 -> r0;

    r0 -> r1 I/I;
    r0 -> r1 C/C;

    r1 -> r1 I/I;
    r1 -> r1 R/R;
    r1 -> r1 C/C;

    r1 -> r2 I/I_;

    r2 -> r2 I/I;
    r2 -> r2 R/R;
    r2 -> r2 C/C;

    // allocate the resource
    s0 -> p0;

    p0 -> p1 I/I_;

    p1 -> p1 I/I;
    p1 -> p1 R/R;
    p1 -> p1 C/C;

    p1 -> p2 R/R_;

    p2 -> p2 I/I;
    p2 -> p2 R/R;
    p2 -> p2 C/C;

    // release the resource
    s0 -> q0;

    q0 -> q1 C/C_;

    q1 -> q1 I/I;
    q1 -> q1 R/R;
    q1 -> q1 C/C;

    q1 -> q2 C/C_;

    q2 -> q2 I/I;
    q2 -> q2 R/R;
    q2 -> q2 C/C;


    accepting: r2, p2, q2;
}

P2 {
    init: s0;

    // the client may request the resource
    s0 -> r1 I/I;
    s0 -> r1 C/C;

    r1 -> r1 I/I;
    r1 -> r1 R/R;
    r1 -> r1 C/C;

    r1 -> r2 I_/R;
    r1 -> r2 I_/I;

    r2 -> r2 I/I;
    r2 -> r2 R/R;
    r2 -> r2 C/C;

    // the client uses the resource
    s0 -> p1 I_/C;

    p1 -> p1 I/I;
    p1 -> p1 R/R;
    p1 -> p1 C/C;

    p1 -> p2 R_/C;

    p2 -> p2 I/I;
    p2 -> p2 R/R;
    p2 -> p2 C/C;

    // the client returns the resource
    s0 -> q1 C_/I;

    q1 -> q1 I/I;
    q1 -> q1 R/R;
    q1 -> q1 C/C;

    q1 -> q2 C_/I;

    q2 -> q2 I/I;
    q2 -> q2 R/R;
    q2 -> q2 C/C;

    accepting: r2, p2, q2;
}

transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 1 .. 4;
