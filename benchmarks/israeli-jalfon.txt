// israeli-jalfon.txt
//
// Israeli-Jalfon self-stabilising protocol (see IJ'90 in our CAV'16 paper for
// more detail)
//
// In a nutshell, this is a routing protocol in a ring-shaped Tology, where
// a process may hold a token. When a process holding a token is chosen by the
// scheduler, it will toss a coin and pass the token to the left/right each with
// probability 1/2. When two tokens are held by the same process, they will be
// merged. The initial configurations are configurations holding at least one
// token. The final configurations (a.k.a. *stable* configurations) are those
// where precisely one process is holding a token. The liveness property to
// prove, hence, is that the probability of reaching a stable configuration
// from any initial configuration is 1.
//
// T  - token
// T_ - token selected
// B  - no token
//

I0 {
    init : s0;

    s0 -> s0 B;
    s0 -> s0 T;

    s0 -> s1 T;

    s1 -> s1 B;
    s1 -> s1 T;

    s1 -> s2 T;

    s2 -> s2 B;
    s2 -> s2 T;

    accepting: s2;
}

closedUnderTransitions;

F {
    init : s0;

    s0 -> s0 B;
    s0 -> s1 T;
    s1 -> s1 B;

    accepting: s1;
}

P1 {
    init : sinit;

    sinit -> s0;
    sinit -> ssB B/nil;

    s0 -> s0 B/B;
    s0 -> s0 T/T;

    s0 -> s1 T/T_;
    s0 -> ss T_/nil;
    s0 -> ss nil/nil;

    s1 -> s1 B/B;
    s1 -> s1 T/T;
    s1 -> ss nil/nil;

    ss -> ss B/nil;
    ss -> ss T/nil;
    ss -> ss T_/nil;
    ss -> ss nil/nil;

    ssB -> ssB B/nil;

    accepting: s1, ss, ssB;
}

P2 {
    init : s0;

    s0 -> s1;
    s0 -> s4;
    s0 -> s7;
    s0 -> s10;

    s1 -> s1 B/B;
    s1 -> s1 T/T;
    s1 -> s2 T_/B;
    s2 -> s3 B/T;
    s2 -> s3 T/T;
    s3 -> s3 B/B;
    s3 -> s3 T/T;

    s4 -> s4 B/B;
    s4 -> s4 T/T;
    s4 -> s5 B/T;
    s4 -> s5 T/T;
    s5 -> s6 T_/B;
    s6 -> s6 B/B;
    s6 -> s6 T/T;

    s7 -> s8 B/T;
    s7 -> s8 T/T;
    s8 -> s8 B/B;
    s8 -> s8 T/T;
    s8 -> s9 T_/B;

    s10 -> s11 T_/B;
    s11 -> s11 B/B;
    s11 -> s11 T/T;
    s11 -> s12 B/T;
    s11 -> s12 T/T;

    accepting: s3, s6, s9, s12;
}

transducerStateGuessing: 1 .. 4;
automatonStateGuessing: 1 .. 4;

symmetries: rotation;
// useRankingFunctions;       // not used for benchmarking

