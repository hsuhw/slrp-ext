// nim.txt
//
// This is the standard nim game. There are three piles of chips containing
// x1, x2, and x3 chips respectively. Two players take turns moving.
// Each move consists of selecting one of the piles and removing chips from it.
// You may not remove chips from more than one pile in one turn, but from the
// pile you selected you may remove as many chips as desired, from one chip to
// the whole pile. The winner is the player who removes the last chip.
//
// For more info on the game, please check the online book Combinatorial Game
// Theory by Thomas S. Ferguson.
//
// The property that we prove for nim games in this model is that, starting from
// configurations (i.e. triple (x1,x2,x3)) whose *nim-sum* is 0, Player 2
// has a winning strategy.
//
// In our encoding as parameterised reachability game:
// Numbers are encoded in binary - most significant digit first


// Notice that for nim-sum to be 0, then every binary position the three
// number must sum up to 0.
I0 {
    init: si;

    si -> s0 bot;
    s0 -> s0 000;
    s0 -> s0 101;
    s0 -> s0 011;
    s0 -> s0 110;

    accepting: s0;
}

F {
    init: s0;

    s0 -> s1 bott;
    s1 -> s1 000;
    s1 -> s1 001;
    s1 -> s1 010;
    s1 -> s1 011;
    s1 -> s1 100;
    s1 -> s1 101;
    s1 -> s1 110;
    s1 -> s1 111;

    accepting: s1;
}

P1 {
    init: si;

    // Empty
    si -> s0;
    s0 -> s1 bot/bott;
    s1 -> s1 000/000;

    // Nonempty: first pile
    si -> p0;
    p0 -> p1 bot/bot;
    p1 -> p1 000/000;
    p1 -> p1 001/001;
    p1 -> p1 010/010;
    p1 -> p1 011/011;
    p1 -> p1 100/100;
    p1 -> p1 101/101;
    p1 -> p1 110/110;
    p1 -> p1 111/111;

        // the first digit where the number differs (and has to decrease)
    p1 -> p2 100/000;
    p1 -> p2 101/001;
    p1 -> p2 110/010;
    p1 -> p2 111/011;

        // after this, it doesn't matter
    p2 -> p2 000/000;
    p2 -> p2 001/001;
    p2 -> p2 010/010;
    p2 -> p2 011/011;
    p2 -> p2 100/100;
    p2 -> p2 101/101;
    p2 -> p2 110/110;
    p2 -> p2 111/111;

    p2 -> p2 000/100;
    p2 -> p2 001/101;
    p2 -> p2 010/110;
    p2 -> p2 011/111;
    p2 -> p2 100/000;
    p2 -> p2 101/001;
    p2 -> p2 110/010;
    p2 -> p2 111/011;

    // Nonempty: second pile
    si -> q0;
    q0 -> q1 bot/bot;
    q1 -> q1 000/000;
    q1 -> q1 001/001;
    q1 -> q1 010/010;
    q1 -> q1 011/011;
    q1 -> q1 100/100;
    q1 -> q1 101/101;
    q1 -> q1 110/110;
    q1 -> q1 111/111;

        // the first digit where the number differs (and has to decrease)
    q1 -> q2 010/000;
    q1 -> q2 011/001;
    q1 -> q2 110/100;
    q1 -> q2 111/101;

        // after this, it doesn't matter
    q2 -> q2 000/000;
    q2 -> q2 001/001;
    q2 -> q2 010/010;
    q2 -> q2 011/011;
    q2 -> q2 100/100;
    q2 -> q2 101/101;
    q2 -> q2 110/110;
    q2 -> q2 111/111;

    q2 -> q2 000/010;
    q2 -> q2 001/011;
    q2 -> q2 100/110;
    q2 -> q2 101/111;
    q2 -> q2 010/000;
    q2 -> q2 011/001;
    q2 -> q2 110/100;
    q2 -> q2 111/101;

    // Nonempty: third pile
    si -> r0;
    r0 -> r1 bot/bot;
    r1 -> r1 000/000;
    r1 -> r1 001/001;
    r1 -> r1 010/010;
    r1 -> r1 011/011;
    r1 -> r1 100/100;
    r1 -> r1 101/101;
    r1 -> r1 110/110;
    r1 -> r1 111/111;

        // the first digit where the number differs (and has to decrease)
    r1 -> r2 001/000;
    r1 -> r2 011/010;
    r1 -> r2 101/100;
    r1 -> r2 111/110;

        // after this, it doesn't matter
    r2 -> r2 000/000;
    r2 -> r2 001/001;
    r2 -> r2 010/010;
    r2 -> r2 011/011;
    r2 -> r2 100/100;
    r2 -> r2 101/101;
    r2 -> r2 110/110;
    r2 -> r2 111/111;

    r2 -> r2 000/001;
    r2 -> r2 010/011;
    r2 -> r2 100/101;
    r2 -> r2 110/111;
    r2 -> r2 001/000;
    r2 -> r2 011/010;
    r2 -> r2 101/100;
    r2 -> r2 111/110;

    accepting: s1, p2, q2, r2;
}

P2 {
    init: si;

    //
    si -> sii;
    sii -> siii bott/bott;
    siii -> siii 000/000;

    // Empty
    si -> s0;
    s0 -> s1 bot/boto; // declare Player 1 wins if empty
    s1 -> s1 000/000;

    // Nonempty: first pile
    si -> p0;
    p0 -> p1 bot/bot;
    p1 -> p1 000/000;
    p1 -> p1 001/001;
    p1 -> p1 010/010;
    p1 -> p1 011/011;
    p1 -> p1 100/100;
    p1 -> p1 101/101;
    p1 -> p1 110/110;
    p1 -> p1 111/111;

        // the first digit where the number differs (and has to decrease)
    p1 -> p2 100/000;
    p1 -> p2 101/001;
    p1 -> p2 110/010;
    p1 -> p2 111/011;

        // after this, it doesn't matter
    p2 -> p2 000/000;
    p2 -> p2 001/001;
    p2 -> p2 010/010;
    p2 -> p2 011/011;
    p2 -> p2 100/100;
    p2 -> p2 101/101;
    p2 -> p2 110/110;
    p2 -> p2 111/111;

    p2 -> p2 000/100;
    p2 -> p2 001/101;
    p2 -> p2 010/110;
    p2 -> p2 011/111;
    p2 -> p2 100/000;
    p2 -> p2 101/001;
    p2 -> p2 110/010;
    p2 -> p2 111/011;

    // Nonempty: second pile
    si -> q0;
    q0 -> q1 bot/bot;
    q1 -> q1 000/000;
    q1 -> q1 001/001;
    q1 -> q1 010/010;
    q1 -> q1 011/011;
    q1 -> q1 100/100;
    q1 -> q1 101/101;
    q1 -> q1 110/110;
    q1 -> q1 111/111;

        // the first digit where the number differs (and has to decrease)
    q1 -> q2 010/000;
    q1 -> q2 011/001;
    q1 -> q2 110/100;
    q1 -> q2 111/101;

        // after this, it doesn't matter
    q2 -> q2 000/000;
    q2 -> q2 001/001;
    q2 -> q2 010/010;
    q2 -> q2 011/011;
    q2 -> q2 100/100;
    q2 -> q2 101/101;
    q2 -> q2 110/110;
    q2 -> q2 111/111;

    q2 -> q2 000/010;
    q2 -> q2 001/011;
    q2 -> q2 100/110;
    q2 -> q2 101/111;
    q2 -> q2 010/000;
    q2 -> q2 011/001;
    q2 -> q2 110/100;
    q2 -> q2 111/101;

    // Nonempty: third pile
    si -> r0;
    r0 -> r1 bot/bot;
    r1 -> r1 000/000;
    r1 -> r1 001/001;
    r1 -> r1 010/010;
    r1 -> r1 011/011;
    r1 -> r1 100/100;
    r1 -> r1 101/101;
    r1 -> r1 110/110;
    r1 -> r1 111/111;

        // the first digit where the number differs (and has to decrease)
    r1 -> r2 001/000;
    r1 -> r2 011/010;
    r1 -> r2 101/100;
    r1 -> r2 111/110;

        // after this, it doesn't matter
    r2 -> r2 000/000;
    r2 -> r2 001/001;
    r2 -> r2 010/010;
    r2 -> r2 011/011;
    r2 -> r2 100/100;
    r2 -> r2 101/101;
    r2 -> r2 110/110;
    r2 -> r2 111/111;

    r2 -> r2 000/001;
    r2 -> r2 010/011;
    r2 -> r2 100/101;
    r2 -> r2 110/111;
    r2 -> r2 001/000;
    r2 -> r2 011/010;
    r2 -> r2 101/100;
    r2 -> r2 111/110;

    accepting: s1, p2, q2, r2, siii;
}

transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;

useRankingFunctions;
