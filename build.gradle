import org.gradle.internal.os.OperatingSystem

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'java'
    id 'cpp'
    id 'antlr'
    id 'jacoco'
}

// repos
repositories {
    jcenter()
    mavenCentral()
}

// build: Java part
dependencies {
    antlr 'org.antlr:antlr4:4.7.1'
    compile 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.5'
    compile 'dk.brics.automaton:automaton:1.11-8'
    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'
    compile 'org.eclipse.collections:eclipse-collections-api:9.1.0'
    compile 'org.eclipse.collections:eclipse-collections:9.1.0'
    compile 'org.apache.commons:commons-text:1.2'
    compile 'commons-cli:commons-cli:1.4'
    compile files('lib/jalf.jar')
    testCompile 'com.mscharhag.oleaster:oleaster-runner:0.2.0'
    testCompile 'com.mscharhag.oleaster:oleaster-matcher:0.2.0'
    testCompile 'junit:junit:4.12'
}

generateGrammarSource {
    exclude 'generated/Automaton.g4'
    exclude 'generated/Transducer.g4'
    exclude 'generated/Tokens.g4'
    arguments += ['-lib', 'src/main/antlr/generated']
}

shadowJar {
    destinationDir = projectDir
    classifier = null
}

build.dependsOn shadowJar

// build: native part
def isOnMac = OperatingSystem.current().isMacOsX()

model {
    repositories {
        libs(PrebuiltLibraries) {
            vataPrebuilt {
                headers.srcDir file('include')
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("lib/libvata.a.${isOnMac ? 'darwin' : 'debian'}")
                }
            }
        }
    }
    components {
        vata(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir 'src/main/jni/vata'
                        include "**/*.cpp"
                    }
                    lib library: 'vataPrebuilt', linkage: 'static'
                }
            }
        }
        all {
            binaries.all {
                def javaHome = System.properties['java.home']
                cppCompiler.args '-O2'
                cppCompiler.args '-std=c++14'
                cppCompiler.args "-I${javaHome}/include"
                cppCompiler.args "-I${javaHome}/include/${isOnMac ? 'darwin' : 'linux'}"
            }
            binaries.withType(NativeBinarySpec) {
                buildable = false // disable the default task behaviour
            }
        }
    }
}

task assembleNative {
    doLast {
        tasks.withType(CppCompile) {
            if (it.name.contains('Shared')) {
                println(":${it.name}")
                it.execute()
            }
        }
        tasks.withType(LinkSharedLibrary) { task ->
            println(":${task.name}")
            task.execute()
            copy {
                println(":${task.name.replace('link', 'copy')}")
                from task.binaryFile
                into 'lib'
            }
        }
    }
}

check.dependsOn assembleNative

// test
test {
    testLogging {
        showStandardStreams = true
    }
}

tasks.withType(Test) {
    systemProperty 'java.library.path', 'lib'
}

jacoco {
    toolVersion = '0.8.1'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

// clean
clean.doLast {
    file("${rootProject.name}.jar").delete()
    file('lib/libvata.dylib').delete()
    file('lib/libvata.so').delete()
}
