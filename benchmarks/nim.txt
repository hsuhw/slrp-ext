// nim.txt
//
// This is the standard nim game. There are three piles of chips containing
// x1, x2, and x3 chips respectively. Two players take turns moving.
// Each move consists of selecting one of the piles and removing chips from it.
// You may not remove chips from more than one pile in one turn, but from the
// pile you selected you may remove as many chips as desired, from one chip to
// the whole pile. The winner is the player who removes the last chip.
//
// For more info on the game, please check the online book Combinatorial Game
// Theory by Thomas S. Ferguson.
//
// The property that we prove for nim games in this model is that, starting from
// configurations (i.e. triple (x1,x2,x3)) whose *nim-sum* is 0, Player 2
// has a winning strategy.
//
// In our encoding as parameterised reachability game:
// Numbers are encoded in binary - most significant digit first


// Notice that for nim-sum to be 0, then every binary position the three
// number must sum up to 0.
I0 {
    init: si;

    si -> s0 bot;
    s0 -> s0 OOO;
    s0 -> s0 IOI;
    s0 -> s0 OII;
    s0 -> s0 IIO;

    accepting: s0;
}

F {
    init: s0;

    s0 -> s1 bott;
    s1 -> s1 OOO;
    s1 -> s1 OOI;
    s1 -> s1 OIO;
    s1 -> s1 OII;
    s1 -> s1 IOO;
    s1 -> s1 IOI;
    s1 -> s1 IIO;
    s1 -> s1 III;

    accepting: s1;
}

P1 {
    init: si;

    // Empty
    si -> s0;
    s0 -> s1 bot/bott;
    s1 -> s1 OOO/OOO;

    // Nonempty: first pile
    si -> p0;
    p0 -> p1 bot/bot;
    p1 -> p1 OOO/OOO;
    p1 -> p1 OOI/OOI;
    p1 -> p1 OIO/OIO;
    p1 -> p1 OII/OII;
    p1 -> p1 IOO/IOO;
    p1 -> p1 IOI/IOI;
    p1 -> p1 IIO/IIO;
    p1 -> p1 III/III;

        // the first digit where the number differs (and has to decrease)
    p1 -> p2 IOO/OOO;
    p1 -> p2 IOI/OOI;
    p1 -> p2 IIO/OIO;
    p1 -> p2 III/OII;

        // after this, it doesn't matter
    p2 -> p2 OOO/OOO;
    p2 -> p2 OOI/OOI;
    p2 -> p2 OIO/OIO;
    p2 -> p2 OII/OII;
    p2 -> p2 IOO/IOO;
    p2 -> p2 IOI/IOI;
    p2 -> p2 IIO/IIO;
    p2 -> p2 III/III;

    p2 -> p2 OOO/IOO;
    p2 -> p2 OOI/IOI;
    p2 -> p2 OIO/IIO;
    p2 -> p2 OII/III;
    p2 -> p2 IOO/OOO;
    p2 -> p2 IOI/OOI;
    p2 -> p2 IIO/OIO;
    p2 -> p2 III/OII;

    // Nonempty: second pile
    si -> q0;
    q0 -> q1 bot/bot;
    q1 -> q1 OOO/OOO;
    q1 -> q1 OOI/OOI;
    q1 -> q1 OIO/OIO;
    q1 -> q1 OII/OII;
    q1 -> q1 IOO/IOO;
    q1 -> q1 IOI/IOI;
    q1 -> q1 IIO/IIO;
    q1 -> q1 III/III;

        // the first digit where the number differs (and has to decrease)
    q1 -> q2 OIO/OOO;
    q1 -> q2 OII/OOI;
    q1 -> q2 IIO/IOO;
    q1 -> q2 III/IOI;

        // after this, it doesn't matter
    q2 -> q2 OOO/OOO;
    q2 -> q2 OOI/OOI;
    q2 -> q2 OIO/OIO;
    q2 -> q2 OII/OII;
    q2 -> q2 IOO/IOO;
    q2 -> q2 IOI/IOI;
    q2 -> q2 IIO/IIO;
    q2 -> q2 III/III;

    q2 -> q2 OOO/OIO;
    q2 -> q2 OOI/OII;
    q2 -> q2 IOO/IIO;
    q2 -> q2 IOI/III;
    q2 -> q2 OIO/OOO;
    q2 -> q2 OII/OOI;
    q2 -> q2 IIO/IOO;
    q2 -> q2 III/IOI;

    // Nonempty: third pile
    si -> r0;
    r0 -> r1 bot/bot;
    r1 -> r1 OOO/OOO;
    r1 -> r1 OOI/OOI;
    r1 -> r1 OIO/OIO;
    r1 -> r1 OII/OII;
    r1 -> r1 IOO/IOO;
    r1 -> r1 IOI/IOI;
    r1 -> r1 IIO/IIO;
    r1 -> r1 III/III;

        // the first digit where the number differs (and has to decrease)
    r1 -> r2 OOI/OOO;
    r1 -> r2 OII/OIO;
    r1 -> r2 IOI/IOO;
    r1 -> r2 III/IIO;

        // after this, it doesn't matter
    r2 -> r2 OOO/OOO;
    r2 -> r2 OOI/OOI;
    r2 -> r2 OIO/OIO;
    r2 -> r2 OII/OII;
    r2 -> r2 IOO/IOO;
    r2 -> r2 IOI/IOI;
    r2 -> r2 IIO/IIO;
    r2 -> r2 III/III;

    r2 -> r2 OOO/OOI;
    r2 -> r2 OIO/OII;
    r2 -> r2 IOO/IOI;
    r2 -> r2 IIO/III;
    r2 -> r2 OOI/OOO;
    r2 -> r2 OII/OIO;
    r2 -> r2 IOI/IOO;
    r2 -> r2 III/IIO;

    accepting: s1, p2, q2, r2;
}

P2 {
    init: si;

    //
    si -> sii;
    sii -> siii bott/bott;
    siii -> siii OOO/OOO;

    // Empty
    si -> s0;
    s0 -> s1 bot/boto; // declare Player 1 wins if empty
    s1 -> s1 OOO/OOO;

    // Nonempty: first pile
    si -> p0;
    p0 -> p1 bot/bot;
    p1 -> p1 OOO/OOO;
    p1 -> p1 OOI/OOI;
    p1 -> p1 OIO/OIO;
    p1 -> p1 OII/OII;
    p1 -> p1 IOO/IOO;
    p1 -> p1 IOI/IOI;
    p1 -> p1 IIO/IIO;
    p1 -> p1 III/III;

        // the first digit where the number differs (and has to decrease)
    p1 -> p2 IOO/OOO;
    p1 -> p2 IOI/OOI;
    p1 -> p2 IIO/OIO;
    p1 -> p2 III/OII;

        // after this, it doesn't matter
    p2 -> p2 OOO/OOO;
    p2 -> p2 OOI/OOI;
    p2 -> p2 OIO/OIO;
    p2 -> p2 OII/OII;
    p2 -> p2 IOO/IOO;
    p2 -> p2 IOI/IOI;
    p2 -> p2 IIO/IIO;
    p2 -> p2 III/III;

    p2 -> p2 OOO/IOO;
    p2 -> p2 OOI/IOI;
    p2 -> p2 OIO/IIO;
    p2 -> p2 OII/III;
    p2 -> p2 IOO/OOO;
    p2 -> p2 IOI/OOI;
    p2 -> p2 IIO/OIO;
    p2 -> p2 III/OII;

    // Nonempty: second pile
    si -> q0;
    q0 -> q1 bot/bot;
    q1 -> q1 OOO/OOO;
    q1 -> q1 OOI/OOI;
    q1 -> q1 OIO/OIO;
    q1 -> q1 OII/OII;
    q1 -> q1 IOO/IOO;
    q1 -> q1 IOI/IOI;
    q1 -> q1 IIO/IIO;
    q1 -> q1 III/III;

        // the first digit where the number differs (and has to decrease)
    q1 -> q2 OIO/OOO;
    q1 -> q2 OII/OOI;
    q1 -> q2 IIO/IOO;
    q1 -> q2 III/IOI;

        // after this, it doesn't matter
    q2 -> q2 OOO/OOO;
    q2 -> q2 OOI/OOI;
    q2 -> q2 OIO/OIO;
    q2 -> q2 OII/OII;
    q2 -> q2 IOO/IOO;
    q2 -> q2 IOI/IOI;
    q2 -> q2 IIO/IIO;
    q2 -> q2 III/III;

    q2 -> q2 OOO/OIO;
    q2 -> q2 OOI/OII;
    q2 -> q2 IOO/IIO;
    q2 -> q2 IOI/III;
    q2 -> q2 OIO/OOO;
    q2 -> q2 OII/OOI;
    q2 -> q2 IIO/IOO;
    q2 -> q2 III/IOI;

    // Nonempty: third pile
    si -> r0;
    r0 -> r1 bot/bot;
    r1 -> r1 OOO/OOO;
    r1 -> r1 OOI/OOI;
    r1 -> r1 OIO/OIO;
    r1 -> r1 OII/OII;
    r1 -> r1 IOO/IOO;
    r1 -> r1 IOI/IOI;
    r1 -> r1 IIO/IIO;
    r1 -> r1 III/III;

        // the first digit where the number differs (and has to decrease)
    r1 -> r2 OOI/OOO;
    r1 -> r2 OII/OIO;
    r1 -> r2 IOI/IOO;
    r1 -> r2 III/IIO;

        // after this, it doesn't matter
    r2 -> r2 OOO/OOO;
    r2 -> r2 OOI/OOI;
    r2 -> r2 OIO/OIO;
    r2 -> r2 OII/OII;
    r2 -> r2 IOO/IOO;
    r2 -> r2 IOI/IOI;
    r2 -> r2 IIO/IIO;
    r2 -> r2 III/III;

    r2 -> r2 OOO/OOI;
    r2 -> r2 OIO/OII;
    r2 -> r2 IOO/IOI;
    r2 -> r2 IIO/III;
    r2 -> r2 OOI/OOO;
    r2 -> r2 OII/OIO;
    r2 -> r2 IOI/IOO;
    r2 -> r2 III/IIO;

    accepting: s1, p2, q2, r2, siii;
}

transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;

useRankingFunctions;
